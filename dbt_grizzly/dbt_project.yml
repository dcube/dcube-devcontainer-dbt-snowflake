# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_pipelines'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]
docs-paths: ["docs"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/ directory
# as tables. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.
models:
  dbt_pipelines:
    +on_schema_change: append_new_columns
    +transient: false
    +copy_grants: true
    +incremental_strategy: merge
    +persist_docs:
      # to persists metadata description as comment on snowflake objects
      relation: true
      columns: true

    +tags:
      # set the tag Domain.Name at root level
      - "Domain.Name.MyDomainName"

    1_silver:
      +database: SILVER
      +tags:
        # set the tag DataProduct.Type at database level
        DataProduct.Type.aggregated

      cdm1:
        +schema: CDM1
        +tags:
          # set the tag DataProduct.Name at schema level
          DataProduct.Name.myCoreDataModel1

        stage:
          +materialized: ephemeral # for intermediate transformations

        refined:
          +materialized: table # or incremental for large tables

        output:
          +materialized: view # view for semantic output if needed

    2_gold:
      +database: GOLD
      +tags:
        # set the tag DataProduct.Type at database level
        - "DataProduct.Type.consumer-aligned"

      mart1:
        +schema: MART1
        +tags:
          # set the tag DataProduct.Name at schema level
          DataProduct.Name.myDatamart1

        stage:
          +materialized: ephemeral # for intermediate transformations

        refined:
          +materialized: table # or incremental for large tables

        output:
          +materialized: view # view for semantic output if needed